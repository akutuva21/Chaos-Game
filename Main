#User picked polygon: if it's not in range (3 sides or more), ask input again with user exception
#Plotting the fractal: First, the number of points plotted is input. 
Using a random starting vertex, there is a midpoint plotted between the given point and another random vertex of the polygon. 
This midpoint is used as a point of reference to create another midpoint between it and another random vertex.
Aften the given number of iterations, a fractal should be generated.
It is seen that polygons with an odd number of sides have more visually appealing fractals that appear better with more iterations.
Polygons with an even number of sides require much less iterations to see their fractals, which are fainter and harder to spot.
#See https://math.stackexchange.com/questions/2385147/how-do-i-represent-an-equilateral-triangle-in-cartesian-coordinates-centered-aro
'''The chaos game is meant to emulate a fractal, called the Sierpinski triangle. It can be applied to different shapes 
other than an equilateral triangle. This game represents the butterfly effect, as well as how chaos or randomness can 
eventually form order.'''
# referencing https://www.101computing.net/python-fractals/
